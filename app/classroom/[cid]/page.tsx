"use client";
import dynamic from "next/dynamic";
import { useParams } from "next/navigation";
import { useEffect, useState } from "react";
import { doc, getDoc, collection, query, onSnapshot, deleteDoc, updateDoc, getDocs, writeBatch } from "firebase/firestore";
import { db } from "@/lib/firebase";
import Link from "next/link";
import Swal from "sweetalert2";
import withReactContent from "sweetalert2-react-content";
import Image from "next/image";
import Navbar from "@/app/components/navbar";

const QRCodeCanvas = dynamic(() => import("qrcode.react").then((mod) => mod.QRCodeCanvas), { ssr: false });

const MySwal = withReactContent(Swal);

interface ClassroomInfo {
  code: string;
  name: string;
  photo: string;
  room: string;
  score?: number;
  score_late?: number;
}

interface Classroom {
  id: string;
  owner: string;
  info: ClassroomInfo;
}

interface StudentData {
  uid: string;
  stdid: string;
  name: string;
  status: number; // 0: ‡πÑ‡∏°‡πà‡∏°‡∏≤, 1: ‡∏°‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô, 2: ‡∏°‡∏≤‡∏™‡∏≤‡∏¢
}

interface CheckinData {
  id: string;
  code: string;
  date: string;
  status: number;
  attending: number;
}

export default function ClassroomPage() {
  const { cid } = useParams();
  const [classroom, setClassroom] = useState<Classroom | null>(null);
  const [checkins, setCheckins] = useState<CheckinData[]>([]);
  const [score, setScore] = useState<number>(0);
  const [scoreLate, setScoreLate] = useState<number>(0);

  useEffect(() => {
    if (cid) {
      fetchClassroomData(cid as string);
      fetchCheckinData(cid as string);
    }
  }, [cid]);

  // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏à‡∏≤‡∏Å Firestore
  const fetchClassroomData = async (classroomId: string) => {
    try {
      const docRef = doc(db, "classroom", classroomId);
      const docSnap = await getDoc(docRef);
      if (docSnap.exists()) {
        const data = docSnap.data() as Omit<Classroom, "id">;
        setClassroom({ ...data, id: docSnap.id });
        setScore(data.info.score || 0);
        setScoreLate(data.info.score_late || 0);
      } else {
        console.error("No such classroom!");
      }
    } catch (error) {
      console.error("Error fetching classroom data:", error);
    }
  };

  // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Check-in ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
  const fetchCheckinData = async (classroomId: string) => {
    const checkinRef = collection(db, "classroom", classroomId, "checkin");
    const q = query(checkinRef);
  
    const unsubscribe = onSnapshot(q, async (snapshot) => {
      const checkinList: CheckinData[] = await Promise.all(
        snapshot.docs.map(async (docSnap) => {
          const data = docSnap.data();
          const checkinId = docSnap.id;
  
          // ‚úÖ ‡∏î‡∏∂‡∏á students ‡∏à‡∏≤‡∏Å sub-collection `checkin/{cno}/students`
          const studentsRef = collection(db, "classroom", classroomId, "checkin", checkinId, "students");
          const studentsSnapshot = await getDocs(studentsRef);
  
          // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô (status: 1 = ‡∏°‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô, 2 = ‡∏°‡∏≤‡∏™‡∏≤‡∏¢) 
          const attendingCount = studentsSnapshot.docs.filter((doc) => {
            const studentData = doc.data();
            return studentData.status === 1 || studentData.status === 2;
          }).length;
  
          return {
            id: checkinId,
            code: data.code || "N/A",
            date: data.date || "N/A",
            status: data.status ?? 0,
            attending: attendingCount,
          };
        })
      );
  
      // ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡πÉ‡∏´‡∏°‡πà ‚Üí ‡πÄ‡∏Å‡πà‡∏≤ (Check-in ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏ö‡∏ô‡∏™‡∏∏‡∏î)
      checkinList.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());
  
      setCheckins(checkinList);
    });
  
    return () => unsubscribe();
  };

  // ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á Check-in
  const toggleCheckinStatus = async (checkinId: string, newStatus: number) => {
    try {
      await updateDoc(doc(db, "classroom", cid as string, "checkin", checkinId), {
        status: newStatus, // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏î
      });
    } catch (error) {
      console.error("Error updating check-in status:", error);
      Swal.fire("Error!", "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏î‡πâ", "error");
    }
  };

  const showQRCode = () => {
    MySwal.fire({
      title: "Classroom QR Code",
      html: (
        <div className="flex justify-center">
          <QRCodeCanvas value={"cid"+cid as string} size={380} />
        </div>
      ),
      showCloseButton: true,
      showConfirmButton: false,
    });
  };

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö Check-in ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Firestore
  const handleDeleteCheckin = async (checkinId: string) => {
    try {
      const confirmDelete = await Swal.fire({
        title: "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö?",
        text: "‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö Check-in ‡∏ô‡∏µ‡πâ?",
        icon: "warning",
        showCancelButton: true,
        confirmButtonColor: "#d33",
        cancelButtonColor: "#3085d6",
        confirmButtonText: "‡πÉ‡∏ä‡πà, ‡∏•‡∏ö‡πÄ‡∏•‡∏¢!",
        cancelButtonText: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
      });

      if (confirmDelete.isConfirmed) {
        await deleteDoc(doc(db, "classroom", cid as string, "checkin", checkinId));
        Swal.fire("‡∏•‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", "Check-in ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß", "success");
      }
    } catch (error) {
      console.error("Error deleting check-in:", error);
      Swal.fire("Error!", "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö Check-in ‡πÑ‡∏î‡πâ", "error");
    }
  };

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Score ‡πÅ‡∏•‡∏∞ Score Late ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Firestore
  const updateScore = async () => {
    if (!cid) return;
  
    try {
      const classroomRef = doc(db, "classroom", cid as string);
  
      // ‚úÖ 1) ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà classroom
      await updateDoc(classroomRef, {
        "info.score": score,
        "info.score_late": scoreLate,
      });
  
      // ‚úÖ 2) ‡∏î‡∏∂‡∏á check-in ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô classroom
      const checkinRef = collection(db, "classroom", cid as string, "checkin");
      const checkinSnapshot = await getDocs(checkinRef);
  
      if (checkinSnapshot.empty) {
        console.log("‚ö†Ô∏è No check-in data found.");
        return;
      }
  
      // ‚úÖ 3) ‡πÉ‡∏ä‡πâ batch ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏∏‡∏Å check-in ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
      const batch = writeBatch(db);
      console.log("üü¢ Fetching check-in records...");
  
      for (const checkinDoc of checkinSnapshot.docs) {
        const checkinId = checkinDoc.id;
        const studentsRef = collection(db, "classroom", cid as string, "checkin", checkinId, "students");
        const studentsSnapshot = await getDocs(studentsRef);
  
        if (studentsSnapshot.empty) {
          console.log(`‚ö†Ô∏è Check-in ${checkinId} ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô`);
          continue;
        }
  
        console.log(`üîÑ Processing Check-in ID: ${checkinId}, Students: ${studentsSnapshot.size}`);
  
        // studentsSnapshot.forEach((studentDoc) => {
        //   const studentData = studentDoc.data();
        //   const studentId = studentDoc.id;
  
        //   // ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
        //   let newScore = 0; // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô 0 (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏≤)
        //   if (studentData.status === 1) {
        //     newScore = score; // ‡∏°‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
        //   } else if (studentData.status === 2) {
        //     newScore = scoreLate; // ‡∏°‡∏≤‡∏™‡∏≤‡∏¢
        //   }
  
        //   console.log(`üéØ Updating Student: ${studentId}, Status: ${studentData.status}, New Score: ${newScore}`);
  
        //   // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô‡πÉ‡∏ô sub-collection `students`
        //   batch.update(doc(db, "classroom", cid as string, "checkin", checkinId, "students", studentId), {
        //     score: newScore,
        //   });
        // });
      }
  
      // ‚úÖ 4) ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      await batch.commit();
  
      Swal.fire("Success!", "‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß", "success");
    } catch (error) {
      console.error("‚ùå Error updating student scores:", error);
      Swal.fire("Error!", "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÑ‡∏î‡πâ", "error");
    }
  };

  return (
    <>
      <title>Classroom</title>
      <div className="p-6 bg-gray-100 min-h-screen">
        <Navbar />

        {classroom && (
          <div className="mt-6 bg-white p-6 rounded-lg shadow-md">
            <div className="relative w-full">
              <Image
                src={classroom.info.photo || "https://www.shutterstock.com/image-vector/user-profile-icon-vector-avatar-600nw-2247726673.jpg"}
                alt="Classroom"
                width={400}
                height={300}
                className="w-full h-96 object-cover rounded-lg shadow-md"
              />
              <div className="absolute top-4 right-4 flex flex-col gap-2 w-[180px]">
                {/* ‚úÖ ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πà‡∏° Edit Classroom ‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏ï‡πá‡∏° */}
                <Link href={`/edit-classroom/${cid}`} className="w-full">
                  <button className="w-full px-4 py-2 bg-yellow-400 text-white rounded-lg shadow-md hover:bg-yellow-500">
                    Edit Classroom
                  </button>
                </Link>

                {/* ‚úÖ ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ QR-Classroom ‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏ï‡πá‡∏°‡πÅ‡∏•‡∏∞‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô */}
                <div className="bg-white p-4 rounded-lg shadow-md w-full">
                  <h3 className="text-lg font-semibold text-center">QR-Classroom</h3>
                  <div className="flex justify-center">
                    <QRCodeCanvas value={cid as string} size={75} />
                  </div>
                  <button
                    onClick={showQRCode}
                    className="block w-full mt-2 bg-gray-200 text-gray-700 p-2 rounded-lg text-sm hover:bg-gray-300"
                  >
                    SHOW QR-CODE
                  </button>
                </div>
              </div>
            </div>
            <h2 className="text-xl font-semibold mt-4">{classroom.info.code} {classroom.info.name}</h2>
          </div>
        )}



        <div className="p-6 bg-gray-100 min-h-screen">
          <h2 className="text-2xl font-bold">Check-in</h2>
          <div className="flex justify-between items-center mt-4">
          <div className="flex items-center gap-4 mt-4">
            <label className="font-semibold">‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô:</label>
            <input
              type="number"
              value={score}
              onChange={(e) => setScore(parseFloat(e.target.value))}
              className="border px-2 py-1 w-16 text-center"
            />
            <label className="font-semibold">‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏™‡∏≤‡∏¢:</label>
            <input
              type="number"
              value={scoreLate}
              onChange={(e) => setScoreLate(parseFloat(e.target.value))}
              className="border px-2 py-1 w-16 text-center"
            />
            <button onClick={updateScore} className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600">
              Save
            </button>
          </div>
          <Link href={`/classroom/${cid}/create-checkin`}>
            <button className="mt-4 px-4 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600">
              + Add Check-in
            </button>
          </Link>
          </div>
          <div className="mt-6 bg-white shadow-md rounded-lg overflow-hidden">
            <table className="w-full text-left border-collapse">
              <thead>
                <tr className="bg-gray-200">
                  <th className="p-3 text-center">No</th>
                  <th className="p-3 text-center">Code</th>
                  <th className="p-3 text-center">Date</th>
                  <th className="p-3 text-center">Attending</th>
                  <th className="p-3 text-center">Status</th>
                  <th className="p-3 text-center">Action</th>
                </tr>
              </thead>
              <tbody>
                {checkins.length > 0 ? (
                  checkins.map((checkin, index) => (
                    <tr key={checkin.id} className={index % 2 === 0 ? "bg-gray-100" : "bg-white"}>
                      <td className="p-3 text-center">{index + 1}</td>
                      <td className="p-3 text-center">{checkin.code}</td>
                      <td className="p-3 text-center">{checkin.date}</td>
                      <td className="p-3 text-center">{checkin.attending}</td>
                      {/* ‚úÖ ‡∏õ‡∏∏‡πà‡∏° Toggle ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ */}
                      <td className="p-3 text-center">
                        <div className="inline-flex rounded-full border border-black bg-gray-200 overflow-hidden">
                          {["‡∏õ‡∏¥‡∏î", "‡∏Å‡∏≥‡∏•‡∏±‡∏á", "‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏≤‡∏¢"].map((label, idx) => (
                            <button
                              key={idx}
                              onClick={() => {
                                if (checkin.status !== idx) {
                                  toggleCheckinStatus(checkin.id, idx); // ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤ idx ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
                                }
                              }}
                              className={`px-4 py-1 text-sm transition-all duration-200 flex-1 ${checkin.status === idx ? "bg-gray-500 text-white" : "bg-white text-black"
                                }`}
                            >
                              {label}
                            </button>
                          ))}
                        </div>
                      </td>
                      <td className="p-3 text-center">
                        <button onClick={() => handleDeleteCheckin(checkin.id)} className="me-1 px-2 py-1 text-sm bg-red-500 text-white rounded hover:bg-red-600">‡∏•‡∏ö</button>
                        <Link href={`/classroom/${cid}/check-in/${checkin.id}`}>
                          <button className=" ms-1 px-2 py-1 text-sm bg-green-500 text-white rounded hover:bg-green-600">View</button>
                        </Link>
                      </td>
                    </tr>
                  ))
                ) : (
                  <tr><td colSpan={6} className="text-center p-4">No check-in records found</td></tr>
                )}
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </>
  );
}
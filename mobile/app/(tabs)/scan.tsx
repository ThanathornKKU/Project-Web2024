import React, { useState, useEffect, useCallback } from 'react';
import { View, Text, Button, StyleSheet } from 'react-native';
import { CameraView, useCameraPermissions } from 'expo-camera';
import { useRouter } from 'expo-router';
import { useFocusEffect } from '@react-navigation/native';
import { auth, db } from '@/lib/firebaseConfig';
import { doc, getDoc, updateDoc } from 'firebase/firestore';
import AwesomeAlert from 'react-native-awesome-alerts';

export default function BarcodeScannerScreen() {
  const [permission, requestPermission] = useCameraPermissions();
  const [scanned, setScanned] = useState(false);
  const router = useRouter();
  const [courseInfo, setCourseInfo] = useState<{ code: string; name: string } | null>(null);
  const [cid, setCid] = useState<string | null>(null);
  const [alertVisible, setAlertVisible] = useState(false);
  const [confirmVisible, setConfirmVisible] = useState(false);
  const [alertMessage, setAlertMessage] = useState('');
  const [alertSuccess, setAlertSuccess] = useState(false);
  const user = auth.currentUser;

  useFocusEffect(
    useCallback(() => {
      setScanned(false);
    }, [])
  );

  useEffect(() => {
    if (!permission) {
      requestPermission();
    }
  }, [permission]);

  const handleBarCodeScanned = async ({ type, data }: { type: string; data: string }) => {
    setScanned(true);

    if (data.startsWith("cid")) {
      const extractedCid = data.replace("cid", "").trim();
      setCid(extractedCid);

      try {
        const classRef = doc(db, "classroom", extractedCid);
        const classSnap = await getDoc(classRef);

        if (classSnap.exists()) {
          const classData = classSnap.data();
          setCourseInfo({ code: classData.info.code, name: classData.info.name });
          setConfirmVisible(true); // ‡πÅ‡∏™‡∏î‡∏á Popup ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°
        } else {
          setAlertMessage("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ß‡∏¥‡∏ä‡∏≤‡∏ô‡∏µ‡πâ\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á");
          setAlertSuccess(false);
          setAlertVisible(true);
          setScanned(false);
        }
      } catch (error) {
        setAlertMessage("‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î\n‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏¥‡∏ä‡∏≤");
        setAlertSuccess(false);
        setAlertVisible(true);
        setScanned(false);
      }
    } else {
      router.push({
        pathname: "/",
        params: { scannedData: `${type}: ${data}` },
      });
    }
  };

  const handleJoinClass = async () => {
    if (!user || !cid) return;
    setConfirmVisible(false);

    try {
      const userRef = doc(db, "users", user.uid);
      await updateDoc(userRef, {
        [`classroom.${cid}`]: { status: 2 },
      });

      setAlertMessage("‚úÖ ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏ß‡∏¥‡∏ä‡∏≤‡∏ô‡∏µ‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß");
      setAlertSuccess(true);
      setAlertVisible(true);
    } catch (error) {
      setAlertMessage("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î\n‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà");
      setAlertSuccess(false);
      setAlertVisible(true);
    }
  };

  if (!permission) {
    return <Text>Requesting camera permission...</Text>;
  }
  if (!permission.granted) {
    return (
      <View style={styles.permissionContainer}>
        <Text>No access to camera</Text>
        <Button title="Grant Permission" onPress={requestPermission} />
      </View>
    );
  }

  return (
    <View style={styles.container}>
      <CameraView
        style={styles.camera}
        facing="back"
        barcodeScannerSettings={{
          barcodeTypes: ["qr", "ean13", "ean8", "upc_a", "upc_e"],
        }}
        onBarcodeScanned={scanned ? undefined : handleBarCodeScanned}
      />

      {scanned && (
        <View style={styles.resultContainer}>
          <Text style={styles.resultText}>Processing...</Text>
        </View>
      )}

      {/* Popup ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏ß‡∏¥‡∏ä‡∏≤ */}
      <AwesomeAlert
        show={confirmVisible}
        showProgress={false}
        title="üìö ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏ß‡∏¥‡∏ä‡∏≤"
        message={`‡∏à‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°\n${courseInfo?.code} - ${courseInfo?.name} ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`}
        closeOnTouchOutside={false}
        closeOnHardwareBackPress={false}
        showCancelButton={true}
        showConfirmButton={true}
        cancelText="‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å"
        confirmText="‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°"
        confirmButtonColor="#28a745"
        cancelButtonColor="#dc3545"
        onCancelPressed={() => setConfirmVisible(false)}
        onConfirmPressed={handleJoinClass}
      />

      {/* Popup ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô */}
      <AwesomeAlert
        show={alertVisible}
        showProgress={false}
        title={alertSuccess ? "‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" : "‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î"}
        message={alertMessage}
        closeOnTouchOutside={true}
        closeOnHardwareBackPress={false}
        showCancelButton={false}
        showConfirmButton={true}
        confirmText="‡∏ï‡∏Å‡∏•‡∏á"
        confirmButtonColor={alertSuccess ? "#28a745" : "#dc3545"}
        onConfirmPressed={() => {
          setAlertVisible(false);
          if (alertSuccess) {
            router.replace("/");
          }
        }}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1, justifyContent: "center", alignItems: "center" },
  camera: { flex: 1, width: "100%" },
  permissionContainer: { flex: 1, justifyContent: "center", alignItems: "center" },
  resultContainer: { position: "absolute", bottom: 20, backgroundColor: "white", padding: 10 },
  resultText: { fontSize: 16, fontWeight: "bold" },
});